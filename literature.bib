% !TeX encoding = UTF-8
% !TeX root = MAIN.tex

	@Book{Smith,
title       = {Virtual machines :: versatile platforms for systems and processes},
author      = {James E. Smith},
publisher = {Morgan Kaufmann Publishers},
address = {Amsterdam ; Boston},
year        = {2005}
}

	@Book{Lindholm,
title     	= {The Java Virtual Machine Specification Java SE 16 Edition},
publisher 	= {Oracle America},
year     	= {2021},
howpublished = {online},
author    	= {Tim Lindholm and Frank Yellin and Gilad Bracha and Alex Buckley and Daniel Smith},
url = {https://docs.oracle.com/javase/specs/jvms/se16/jvms16.pdf}
	}

	@Book{Gosling,
title 	= {The Java Language Specification Java SE 16 Edition},
author		= {James Gosling and Bill Joy and Guy Steele and Gilad Bracha and Alex Buckley and Daniel Smith and Gavin Bierman},
howpublished= {online},
year		= {2021},
publisher = {Oracle America},
url = {https://docs.oracle.com/javase/specs/jls/se16/jls16.pdf}
	}

@article{10.1145/3386327,
    author = {Wirfs-Brock, Allen and Eich, Brendan},
    title = {JavaScript: The First 20 Years},
    year = {2020},
    issue_date = {June 2020},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {4},
    number = {HOPL},
    url = {https://doi.org/10.1145/3386327},
    doi = {10.1145/3386327},
    abstract = {How a sidekick scripting language for Java, created at Netscape in a ten-day hack, ships first as a de facto Web standard and eventually becomes the world's most widely used programming language. This paper tells the story of the creation, design, evolution, and standardization of the JavaScript language over the period of 1995--2015. But the story is not only about the technical details of the language. It is also the story of how people and organizations competed and collaborated to shape the JavaScript language which dominates the Web of 2020.},
    journal = {Proc. ACM Program. Lang.},
    month = jun,
    articleno = {77},
    numpages = {189},
    keywords = {JavaScript, Standards, Browser game theory, Web browsers, History of programming languages, ECMAScript}
}
	
@inproceedings{VMRule,
	author = {W\"{u}rthinger, Thomas and Wimmer, Christian and W\"{o}\ss{}, Andreas and Stadler, Lukas and Duboscq, Gilles and Humer, Christian and Richards, Gregor and Simon, Doug and Wolczko, Mario},
	title = {One VM to Rule Them All},
	year = {2013},
	isbn = {9781450324724},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2509578.2509581},
	doi = {10.1145/2509578.2509581},
	abstract = {Building high-performance virtual machines is a complex and expensive undertaking; many popular languages still have low-performance implementations. We describe a new approach to virtual machine (VM) construction that amortizes much of the effort in initial construction by allowing new languages to be implemented with modest additional effort. The approach relies on abstract syntax tree (AST) interpretation where a node can rewrite itself to a more specialized or more general node, together with an optimizing compiler that exploits the structure of the interpreter. The compiler uses speculative assumptions and deoptimization in order to produce efficient machine code. Our initial experience suggests that high performance is attainable while preserving a modular and layered architecture, and that new high-performance language implementations can be obtained by writing little more than a stylized interpreter.},
	booktitle = {Proceedings of the 2013 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming \& Software},
	pages = {187–204},
	numpages = {18},
	keywords = {dynamic languages, java, optimization, virtual machine, javascript, language implementation},
	location = {Indianapolis, Indiana, USA},
	series = {Onward! 2013}
}

@inproceedings{inproceedings,
	author = {Duboscq, Gilles and Stadler, Lukas and Wuerthinger, Thomas and Simon, Doug and Wimmer, Christian and Mössenböck, Hanspeter},
	year = {2013},
	month = {02},
	pages = {},
	title = {Graal IR: An Extensible Declarative Intermediate Representation}
}

@inproceedings{ChambDeopt,
	author = {Hölzle, Urs and Chambers, Craig and Ungar, David},
	year = {1992},
	month = {07},
	pages = {32-43},
	title = {Debugging Optimized Code with Dynamic Deoptimization.},
	volume = {27},
	journal = {Sigplan Notices - SIGPLAN},
	doi = {10.1145/143103.143114}
}

@inproceedings{grimmerNative,
	author = {Grimmer, Matthias and Rigger, Manuel and Stadler, Lukas and Schatz, Roland and Mössenböck, Hanspeter},
	year = {2013},
	month = {09},
	pages = {35-44},
	title = {An efficient native function interface for Java},
	journal = {ACM International Conference Proceeding Series},
	doi = {10.1145/2500828.2500832}
}

@article{wuerthSelf,
	author = {W\"{u}rthinger, Thomas and Wöß, Andreas and Stadler, Lukas and Duboscq, Gilles and Simon, Doug and Wimmer, Christian},
	year = {2013},
	month = {01},
	pages = {73-82},
	title = {Self-optimizing AST interpreters},
	volume = {48},
	journal = {ACM SIGPLAN Notices},
	doi = {10.1145/2480360.2384587}
}

@inproceedings{ChambOpti,
	author = {Hölzle, Urs and Chambers, Craig and Ungar, David},
	year = {1991},
	month = {07},
	pages = {21-38},
	title = {Optimizing Dynamically-Typed Object-Oriented Languages With Polymorphic Inline Caches.},
	isbn = {3-540-54262-0},
	doi = {10.1007/BFb0057013}
}

@article{FutaPart,
	author = {Futamura, Yoshihiko},
	year = {1999},
	month = {12},
	pages = {381-391},
	title = {Partial Evaluation of Computation Process--An Approach to a Compiler-Compiler},
	volume = {12},
	journal = {Higher-Order and Symbolic Computation},
	doi = {10.1023/A:1010095604496}
}

@online{graalVMStart,
    title = {Get started with GraalVM},
    url = {https://www.graalvm.org/docs/getting-started/},
    urldate = {2021-06-08}
}

@online{graalVMIntro,
    title = {Introduction to GraalVM},
    url = {https://www.graalvm.org/docs/introduction/},
    urldate = {2021-06-08}
}

@online{graalVMNative,
    title = {GraalVM Native Image},
    url = {https://www.graalvm.org/reference-manual/native-image/},
    urldate = {2021-06-08}
}

@online{Graaljs,
	title = {GraalVM JavaScript Implementation},
	url = {https://www.graalvm.org/reference-manual/js/},
	urldate = {2021-03-31}
}

@online{GraaljsComp,
	title = {JavaScript Compatibility},
	url = {https://www.graalvm.org/reference-manual/js /JavaScriptCompatibility/},
	urldate = {2021-03-31}
}

@online{kangax1,
	author = {Kangax and Webbedspace and Pushkarev, Denis},
	title = {ECMAScript compatibility table},
	url = {kangax.github.io/compat-table/es2016plus},
	urldate = {2021-03-31}
}

@online{kangax2,
	author = {Kangax and Webbedspace and Pushkarev, Denis},
	title = {ECMAScript compatibility table},
	url = {kangax.github.io/compat-table/esnext},
	urldate = {2021-03-31}
}

@online{gitTC,
	author = {Harband, Jordan and others},
	title = {ECMAScript proposals},
	url = {https://github.com/tc39/proposals},
	urldate = {2021-03-31}
}

@online{gitMB,
	author = {Ehrenberg, Daniel and Surma},
	title = {JS Module Blocks},
	url = {https://github.com/tc39/proposal-js-module-blocks},
	urldate = {2021-03-31}
}

@online{ecma,
	editor = {Guo, Shu-yu and Ficarra, Michael and Gibbons, Kevin},
	title = {ECMAScript 2022 Language Specification},
	url = {https://tc39.es/ecma262/},
	urldate = {2021-03-31}
}

@online{ecmaProp,
     title = {The TC39 Process},
     url = {https://tc39.es/process-document/},
     urldate = {2021-06-08}
}

@online{ecmaTest262,
    title = {Test262: ECMAScript Test Suite},
    url = {https://github.com/tc39/test262},
    urldate = {2021-06-10}
}

@online{ecmaTestSpec,
   title = {ECMA-414},
   url = {https://www.ecma-international.org/publications-and-standards/standards/ecma-414/},
   urldate = {2021-06-10}
}

@online{pypl,
	author = {Carbonnelle, Pierre},
	url = {https://pypl.github.io/PYPL.html},
	urldate = {2021-04-03}
}

@online{graalTwitter,
    author = {Maika Möbus},
    title = {GraalVM: Clearing up confusion around the term and why Twitter uses it in production},
    url = {https://jaxenter.com/graalvm-chris-thalinger-interview-163074.html},
    urldate = {2021-07-01}
}

@online{workers,
    title = {Using Web Workers},
    url = {https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers},
    urldate = {2021-07-01}
}

@online{pCode,
    title = {p-System Operating System manual},
    url = {http://www.sageandstride.org/html/manuals.html},
    urldate = {2021-07-01}
}

@book{HennessyJohnL2007Ca:a,
    publisher = {Elsevier Morgan Kaufmann},
    isbn = {9780123704900},
    year = {2007},
    title = {Computer architecture : a quantitative approach},
    edition = {4. ed.},
    language = {eng},
    author = {Hennessy, John L},
    keywords = {Computer architecture ; Computerarchitektur},
    url = {http://media.obvsg.at/AC05695781-1001},
}

@online{facebook,
author = {Alina Yurenko},
title = {GraalVM at Facebook},
url = {https://medium.com/graalvm/graalvm-at-facebook-af09338ac519},
urldate = {2021-08-01}}

@online{nodejs,
title = {Node.js v16.6.0 documentation},
url = {https://nodejs.org/api/worker_threads.html},
urldate = {2021-08-01}}
